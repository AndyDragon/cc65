# Atari VCS 7800 linker configuration file for cc65

SYMBOLS {
    __STACKSIZE__:        type = weak, value = $0010; # 16 bytes stack
}

MEMORY {
    ZP:     file = "", define = yes, start = $0040, size = $00C0, type = rw;
    SP:     file = "", define = yes, start = $0140, size = $00C0, type = rw;
    RAM1:   file = "", define = yes, start = $1800, size = $0840, type = rw;
    RAM2:   file = "", define = yes, start = $2100, size = $0040, type = rw;
    RAM3:   file = "", define = yes, start = $2200, size = $0600, type = rw;
    # "Normal" cartridge rom. Multiple banks arent supported
    # by this script. You may change the rom size, but keep
    # two things in mind:
    # - start must be a multiple of $1000
    # - ROM must end at $ff79
    ROM:    file = %O, define = yes, start = $8000, size = $7f7a, type = ro, fill = yes, fillval = $ff;
    # Encryption stuff
    ROME:   file = %O, start = $ff7a, size = $80, type = ro, fill = yes, fillval = $ff;
    # Interrupt vectors
    ROMV:   file = %O, start = $fffa, size = $6, type = ro, fill = yes, fillval = $ff;
}

SEGMENTS {
    ZEROPAGE:   load = ZP,              type = zp;
    STARTUP:    load = ROM,             type = ro,  define = yes;
    CODE:       load = ROM,             type = ro,  define = yes;
    RODATA:     load = ROM,             type = ro,  define = yes, align = 256;
    DATA:       load = ROM, run = RAM1, type = rw,  define = yes;
    BSS:        load = RAM1,            type = bss, define = yes;
    VECTORS:    load = ROM,             type = ro,  define = yes;
    ENCRYPTION: load = ROME,            type = ro   define = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
